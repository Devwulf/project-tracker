{"version":3,"sources":["services/DBService.js","components/Modal.js","components/ProjectForm.js","components/SidebarNav.js","components/ScaledDrag.tsx","components/Node.js","components/WorkArea.js","components/Project.js","App.js","serviceWorker.js","index.js"],"names":["this","db","Dexie","version","stores","projects","nodes","open","catch","e","console","error","name","seedData","toArray","then","length","addProject","addNode","title","description","project","add","projectId","state","initialX","initialY","connectedFrom","connectedTo","node","Modal","props","isModalOpen","handleOpenModal","bind","handleCloseModal","openModal","setState","children","closeModal","className","onClick","icon","React","Component","ProjectForm","titleProp","descriptionProp","handleOnTitleChange","handleOnDescriptionChange","resetInput","projectTitle","projectDescription","event","target","value","action","htmlFor","id","type","onChange","handleOnProjectCreate","handleOnProjectUpdate","SidebarNav","isNavMenuOpen","openProjectModal","openNavMenu","closeNavMenu","toggleNavMenu","DBService","refreshProjects","stack","to","map","element","i","key","noScrollX","callable","ScaledDrag","x","undefined","y","dx","startX","dy","startY","isDragging","handleDragStart","onDragStart","resetOnStart","scaleX","scaleY","persist","point","localPoint","Math","floor","handleDragMove","onDragMove","handleDragEnd","onDragEnd","resetOnEnd","width","height","captureDragArea","onMouseMove","onMouseUp","fill","dragEnd","dragMove","dragStart","defaultProps","Node","color","item","zoom","transformMatrix","transform","style","cursor","onMouseDown","onTouchMove","onTouchStart","onTouchEnd","onPointerUp","toggleNodeOptions","data-name","rx","stroke","selectedNodeId","strokeWidth","filter","handleOpenViewNode","handleOpenEditNode","handleOnNodeDelete","handleOnNodeUpdateState","handleEdgeCtrlDragEnd","cx","cy","r","visibility","initialTransformZoom","translateX","translateY","skewX","skewY","WorkArea","draggableItems","isDirtyDB","isDirtyDOM","nodeCtrlHidden","edges","openNodeModal","nodeModalMode","nodeTitle","nodeDescription","nodePosX","nodePosY","linkedItemId","handleOnEdgeCreated","handleOnEdgeDelete","handleOpenCreateNode","handleOnNodeCreate","handleOnNodeUpdate","toggleNodeCtrl","checkGraphCycleExists","parseInt","where","equals","forEach","array","concat","index","indexOfWhen","raised","splice","array2","edge","abs","update","updated","screenX","clientX","changedTouches","screenY","clientY","document","elementsFromPoint","find","getAttribute","log","other","items","otherId","substring","n","indexOf","push","some","result","newArr","fromId","toId","itemId","indexTo","indexFrom","removeIf","nodeId","get","delete","Zoom","scaleXMin","scaleXMax","scaleYMin","scaleYMax","in","stdDeviation","in2","mode","onMouseLeave","toString","changePosCallable","startDx","startDy","endDx","endDy","handleOnClick","midPointX","midPointY","isHovered","scale","reset","Array","prototype","predicate","EdgeStart","handlePosChanged","EdgeEnd","Edge","handleOnEnter","handleOnExit","d","onMouseEnter","NodeForm","data","editor","ClassicEditor","getData","NodeView","componentDidUpdate","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","Project","selectedProject","topHidden","handleHideTop","handleOnProjectDelete","ParentSize","library","fas","App","handleAddProject","path","ParamsProvider","useParams","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","basename","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e139a02d.chunk.js","sourcesContent":["import Dexie from 'dexie';\r\n\r\nclass DBService {\r\n    // TODO: Eventually use the # hastag private class fields\r\n    constructor() {\r\n        this.db = new Dexie('ProjectTrackerDB');\r\n        // This means it creates a projects table with\r\n        // an id primary key and an indexed title column\r\n        this.db.version(1).stores({ \r\n            projects: \"++id,title\",\r\n            nodes: \"++id,projectId\"\r\n        });\r\n        this.db.open().catch(e => {\r\n            console.error(\"Opening the db '\" + this.db.name + \"' failed: \" + e);\r\n        });\r\n\r\n        this.seedData();\r\n    }\r\n\r\n    seedData() {\r\n        this.db.projects.toArray().then(projects => {\r\n            if (projects.length <= 0) {\r\n                this.addProject(\"Project Tracker\", \"A project tracker and planner for this web app\");\r\n            }\r\n        });\r\n\r\n        this.db.nodes.toArray().then(nodes => {\r\n            if (nodes.length <= 0) {\r\n                this.addNode(1, \"v1.0 - Initial Release\", \"The feature complete version of this web app\", 0, 0, 1250, [], [2, 3]);\r\n                this.addNode(1, \"Features\", \"\", 0, 500, 1000, [1], [4, 5]);\r\n                this.addNode(1, \"Bugs\", \"\", 0, 500, 2500, [1], []);\r\n                this.addNode(1, \"UI\", \"\", 0, 1000, 800, [2], [6, 7, 8, 9, 10, 11, 12, 13]);\r\n                this.addNode(1, \"Functionality\", \"\", 0, 1000, 1800, [2], [14, 15, 16]);\r\n                this.addNode(1, \"Checklist in node\", \"Another option of tracking stuff besides creating nodes\", 2, 1500, 0, [4], []);\r\n                this.addNode(1, \"Comment nodes\", \"Special nodes that could be used to comment certain parts of the graph\", 0, 1500, 200, [4], []);\r\n                this.addNode(1, \"Grouping nodes together\", \"Wrapping nodes in a nameable group node that could move all the grouped nodes together\", 0, 1500, 400, [4], []);\r\n                this.addNode(1, \"Setting node states\", \"Either not started, cancelled, active, or finished\", 3, 1500, 600, [4], []);\r\n                this.addNode(1, \"Connect node when dragging from another node\", \"Automatically connects new nodes when created by dragging using the plus knob\", 3, 1500, 800, [4], []);\r\n                this.addNode(1, \"Reference nodes\", \"Be able to reference a node from somewhere else in the graph or a different project altogether, always syncing the reference with the real node\", 0, 1500, 1000, [4], []);\r\n                this.addNode(1, \"Adding node from toolbar\", \"Be able to create a node directly from the toolbar by dragging it into the work area\", 0, 1500, 1200, [4], []);\r\n                this.addNode(1, \"Tooltips\", \"Details about the functionality when hovering over, say, buttons\", 0, 1500, 1400, [4], []);\r\n                this.addNode(1, \"Basic hotkeys\", \"Basic hotkeys like deleting a node, copy-pasting, duplicating, undo/redo, etc.\", 0, 1500, 1600, [5], []);\r\n                this.addNode(1, \"Undo/Redo\", \"Keep track of an undo/redo history and be able to go back and forth\", 0, 1500, 1800, [5], []);\r\n                this.addNode(1, \"Make node description optional\", \"\", 3, 1500, 2000, [5], []);\r\n            }\r\n        });\r\n    }\r\n\r\n    get projects() {\r\n        return this.db.projects;\r\n    }\r\n\r\n    addProject(title, description) {\r\n        const project = {\r\n            title, \r\n            description\r\n        };\r\n\r\n        return this.db.projects.add(project);\r\n    }\r\n\r\n    get nodes() {\r\n        return this.db.nodes;\r\n    }\r\n\r\n    addNode(projectId, name, description, state, initialX, initialY, connectedFrom, connectedTo) {\r\n        const node = {\r\n            projectId,\r\n            name,\r\n            description,\r\n            state,\r\n            initialX,\r\n            initialY,\r\n            connectedFrom,\r\n            connectedTo\r\n        };\r\n\r\n        return this.db.nodes.add(node);\r\n    }\r\n}\r\n\r\nexport default new DBService();","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nexport default class Modal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isModalOpen: false\r\n        };\r\n\r\n        this.handleOpenModal = this.handleOpenModal.bind(this);\r\n        this.handleCloseModal = this.handleCloseModal.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.props.openModal(this.handleOpenModal);\r\n    }\r\n\r\n    handleOpenModal() {\r\n        this.setState({isModalOpen: true});\r\n    }\r\n\r\n    handleCloseModal() {\r\n        this.setState({isModalOpen: false});\r\n    }\r\n\r\n    render() {\r\n        const {children} = this.props;\r\n        const closeModal = this.handleCloseModal;\r\n        return(\r\n            <div className={`${this.state.isModalOpen ? 'flex' : 'hidden'} absolute-full items-center justify-center z-30`}>\r\n                <div className=\"absolute-full opacity-50 bg-gray-900 cursor-pointer\"\r\n                     onClick={this.handleCloseModal}></div>\r\n                <div className=\"p-4 sm:p-8 w-2/3 lg:w-1/2 bg-gray-100 z-40 rounded shadow-lg\">\r\n                    <div className=\"mb-4 flex items-center justify-between text-gray-800\">\r\n                        <span className=\"text-lg font-medium\">\r\n                            {this.props.title}\r\n                        </span>\r\n                        <FontAwesomeIcon className=\"text-lg sm:text-xl cursor-pointer\" \r\n                                         icon=\"times\"\r\n                                         onClick={this.handleCloseModal} />\r\n                    </div>\r\n                    <div>\r\n                        {children({ closeModal })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class ProjectForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const {title, description} = props;\r\n        this.state = {\r\n            title: title || \"\",\r\n            description: description || \"\",\r\n            titleProp: title || \"\",\r\n            descriptionProp: description || \"\"\r\n        };\r\n\r\n        this.handleOnTitleChange = this.handleOnTitleChange.bind(this);\r\n        this.handleOnDescriptionChange = this.handleOnDescriptionChange.bind(this);\r\n        this.resetInput = this.resetInput.bind(this);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const {title, description} = this.props;\r\n        if (this.state.titleProp === title &&\r\n            this.state.descriptionProp === description)\r\n            return;\r\n            \r\n        let projectTitle = \"\";\r\n        let projectDescription = \"\";\r\n        if (title)\r\n            projectTitle = title;\r\n\r\n        if (description)\r\n            projectDescription = description;\r\n\r\n        this.setState({title: projectTitle, description: projectDescription, titleProp: projectTitle, descriptionProp: projectDescription});\r\n    }\r\n\r\n    handleOnTitleChange(event) {\r\n        this.setState({title: event.target.value});\r\n    }\r\n\r\n    handleOnDescriptionChange(event) {\r\n        this.setState({description: event.target.value});\r\n    }\r\n\r\n    resetInput() {\r\n        this.setState({title: \"\", description: \"\"});\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <form className=\"text-gray-800\" action=\"\">\r\n                <label htmlFor=\"projectTitle\">\r\n                    <p className=\"mb-2\">Title</p>\r\n                    <input id=\"projectTitle\" className=\"px-2 py-1 mb-4 w-full rounded shadow-inner bg-gray-300 text-gray-700 outline-none focus:shadow-outline focus:bg-blue-100\" \r\n                        type=\"text\"\r\n                        value={this.state.title}\r\n                        onChange={this.handleOnTitleChange} />\r\n                </label>\r\n                <label htmlFor=\"projectDescription\">\r\n                    <p className=\"mb-2\">Description</p>\r\n                    <input id=\"projectTitle\" className=\"px-2 py-1 mb-4 w-full rounded shadow-inner bg-gray-300 text-gray-700 outline-none focus:shadow-outline focus:bg-blue-100\" \r\n                        type=\"text\"\r\n                        value={this.state.description}\r\n                        onChange={this.handleOnDescriptionChange} />\r\n                </label>\r\n                <div className=\"mt-4 flex flex-col justify-center sm:justify-start sm:flex-row-reverse\">\r\n                    <input className=\"px-4 py-2 mb-2 sm:mb-0 rounded-md bg-indigo-500 text-gray-100 hover:bg-indigo-400 cursor-pointer\" \r\n                        type=\"button\" \r\n                        value={`${this.props.handleOnProjectCreate ? 'Create' : 'Edit'} Project`}\r\n                        onClick={() => {\r\n                            if (this.props.handleOnProjectCreate) {\r\n                                if (this.props.handleOnProjectCreate(this.state.title, this.state.description)) {\r\n                                    this.resetInput();\r\n                                    this.props.handleCloseModal();\r\n                                }\r\n                            } else if (this.props.handleOnProjectUpdate) {\r\n                                if (this.props.handleOnProjectUpdate(this.state.title, this.state.description)) {\r\n                                    this.resetInput();\r\n                                    this.props.handleCloseModal();\r\n                                }\r\n                            }\r\n                        }} />\r\n                    <input className=\"px-4 py-2 sm:mr-2 rounded-md bg-gray-300 text-indigo-500 hover:bg-gray-400 cursor-pointer\" \r\n                           type=\"button\" \r\n                           value=\"Cancel\" \r\n                           onClick={this.props.handleCloseModal} />\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Link } from 'react-router-dom';\r\nimport Scrollbar from 'react-scrollbars-custom';\r\n\r\nimport DBService from '../services/DBService';\r\nimport Modal from './Modal';\r\nimport ProjectForm from './ProjectForm';\r\n\r\nexport default class SidebarNav extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isNavMenuOpen: false,\r\n            openProjectModal: null\r\n        };\r\n\r\n        this.openNavMenu = this.openNavMenu.bind(this);\r\n        this.closeNavMenu = this.closeNavMenu.bind(this);\r\n        this.toggleNavMenu = this.toggleNavMenu.bind(this);\r\n        this.handleOnProjectCreate = this.handleOnProjectCreate.bind(this);\r\n    }\r\n\r\n    openNavMenu() {\r\n        this.setState({isNavMenuOpen: true});\r\n    }\r\n\r\n    closeNavMenu() {\r\n        this.setState({isNavMenuOpen: false});\r\n    }\r\n\r\n    toggleNavMenu() {\r\n        if (this.state.isNavMenuOpen)\r\n            this.closeNavMenu();\r\n        else\r\n            this.openNavMenu();\r\n    }\r\n\r\n    handleOnProjectCreate(title, description) {\r\n        // TODO: Show feedback for invalid input\r\n        if (!title || !description)\r\n            return false;\r\n\r\n        DBService.addProject(title, description).then(() => {\r\n            this.props.refreshProjects();\r\n        }).catch(error => {\r\n            console.error(error.stack || error);\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <nav className=\"nav\">\r\n                {/* \r\n                * Plan is to have a top navigation for md and below\r\n                * screen sizes, but have sidebar for lg and above\r\n                * \r\n                * Ignore animations for now\r\n                */}\r\n\r\n                { /* Top navbar */ }\r\n                <div className=\"lg:hidden flex items-center justify-between p-4 bg-gray-800\">\r\n                    { /* Logo */ }\r\n                    <div className=\"\">\r\n                        <FontAwesomeIcon className=\"mr-4 text-2xl text-indigo-500\" icon=\"project-diagram\" />\r\n                        <Link to=\"/\" className=\"text-xl text-gray-100 font-semibold\">Project Tracker</Link>\r\n                    </div>\r\n\r\n                    { /* Hamburger for sidebar items */ }\r\n                    <div className=\"block\">\r\n                        <button className=\"flex items-center py-2 px-3 text-indigo-500 rounded border border-indigo-500 hover:bg-indigo-300\"\r\n                                onClick={this.toggleNavMenu} >\r\n                            <FontAwesomeIcon icon=\"bars\" />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                { /* Nav Items */ }\r\n                <div className={`${this.state.isNavMenuOpen ? '' : 'hidden'} lg:hidden relative z-20`}>\r\n                    <div className=\"absolute w-full px-4 pb-4 bg-gray-800\">\r\n                        {\r\n                            this.props.projects.map((element, i) => (\r\n                                <Link key={i} onClick={this.closeNavMenu} to={\"/project/\" + element.id} className=\"block mb-1 px-4 py-2 rounded-md hover:bg-gray-900 focus:bg-gray-900 text-gray-100\">\r\n                                    <FontAwesomeIcon className=\"mr-4 text-lg text-gray-600\" icon=\"folder\" />\r\n                                    {element.title}\r\n                                </Link>\r\n                            ))\r\n                        }\r\n                            <div className=\"w-full mb-1 px-4 py-2 rounded-md border-gray-600 border-dashed border-2 cursor-pointer hover:bg-gray-900 focus:bg-gray-900 text-gray-500\"\r\n                                    onClick={() => {\r\n                                        this.state.openProjectModal();\r\n                                        this.closeNavMenu();\r\n                                    }}>\r\n                                <FontAwesomeIcon className=\"mr-4 text-lg text-gray-600\" icon=\"plus\" />\r\n                                <span className=\"font-medium\">Add Project</span>\r\n                            </div>\r\n                    </div>\r\n                </div>\r\n\r\n                { /* Sidebar */ }\r\n                <div className=\"hidden lg:flex\">\r\n                    <div className=\"flex-grow h-screen bg-gray-800 relative\">\r\n                        { /* Logo */ }\r\n                        <div className=\"p-4 h-16\">\r\n                            <FontAwesomeIcon className=\"mr-4 text-2xl text-indigo-500\" icon=\"project-diagram\" />\r\n                            <Link to=\"/\" className=\"text-xl text-gray-100 font-semibold\">Project Tracker</Link>\r\n                        </div>\r\n\r\n                        { /* Sidebar Items */ }\r\n                        <div className=\"p-2 fixed top-16 bottom-0 my-auto lg:w-3/12 xl:w-1/5\">\r\n                            { /* TODO: Place the dashboard item here */ }\r\n                            <Scrollbar noScrollX>\r\n                                {\r\n                                    this.props.projects.map((element, i) => (\r\n                                        <Link key={i} to={\"/project/\" + element.id} className=\"block mb-1 px-4 py-2 rounded-md hover:bg-gray-900 focus:bg-gray-900 text-gray-100\">\r\n                                            <FontAwesomeIcon className=\"mr-4 text-lg text-gray-600\" icon=\"folder\" />\r\n                                            {element.title}\r\n                                        </Link>\r\n                                    ))\r\n                                }\r\n                                \r\n                                <div className=\"w-full mb-1 px-4 py-2 rounded-md border-gray-600 border-dashed border-2 cursor-pointer hover:bg-gray-900 focus:bg-gray-900 text-gray-500\"\r\n                                        onClick={this.state.openProjectModal}>\r\n                                    <FontAwesomeIcon className=\"mr-4 text-lg text-gray-600\" icon=\"plus\" />\r\n                                    <span className=\"font-medium\">Add Project</span>\r\n                                </div>\r\n                            </Scrollbar>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Modals here */}\r\n                <Modal title=\"Create New Project\"\r\n                        openModal={callable => {\r\n                            if (!this.state.openProjectModal)\r\n                                this.setState({openProjectModal: callable});\r\n                        }}>\r\n                    {({closeModal}) => (\r\n                    <ProjectForm title=\"\"\r\n                                    description=\"\"\r\n                                    handleOnProjectCreate={this.handleOnProjectCreate}\r\n                                    handleCloseModal={closeModal} />\r\n                    )}\r\n                </Modal>\r\n            </nav>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { localPoint } from '@vx/event';\r\n\r\ntype MouseOrTouchEvent = React.MouseEvent | React.TouchEvent;\r\n\r\nexport type DragProps = {\r\n  /** Children render function which is passed the state of dragging and callbacks for drag start/end/move. */\r\n  children: (args: ChildrenArgs) => React.ReactNode;\r\n  /** Width of the drag container. */\r\n  width: number;\r\n  /** Height of the drag container. */\r\n  height: number;\r\n  /** Whether to render an invisible rect below children to capture the drag area as defined by width and height. */\r\n  captureDragArea?: boolean;\r\n  /** Whether to reset drag state upon the start of a new drag. */\r\n  resetOnStart?: boolean;\r\n  /** Whether to reset drag state upon the end of a drag. */\r\n  resetOnEnd?: boolean;\r\n  /** Optional callback invoked upon drag end. */\r\n  onDragEnd?: (args: HandlerArgs) => void;\r\n  /** Optional callback invoked upon drag movement. */\r\n  onDragMove?: (args: HandlerArgs) => void;\r\n  /** Optional callback invoked upon drag start. */\r\n  onDragStart?: (args: HandlerArgs) => void;\r\n  /** Optional callback invoked upon clicking. */\r\n  onClick?: (event: MouseOrTouchEvent) => void;\r\n\r\n  /** The starting value for x */\r\n  startX: number;\r\n  /** The starting value for y */\r\n  startY: number;\r\n\r\n  /** The X scaling given by the Zoom scale */\r\n  scaleX: number;\r\n  /** The X scaling given by the Zoom scale */\r\n  scaleY: number;\r\n};\r\n\r\nexport type DragState = {\r\n  x: number | undefined;\r\n  y: number | undefined;\r\n  dx: number;\r\n  dy: number;\r\n  isDragging: boolean;\r\n};\r\n\r\nexport type HandlerArgs = DragState & { event: MouseOrTouchEvent };\r\n\r\ntype ChildrenArgs = DragState & {\r\n  dragEnd: (event: MouseOrTouchEvent) => void;\r\n  dragMove: (event: MouseOrTouchEvent) => void;\r\n  dragStart: (event: MouseOrTouchEvent) => void;\r\n};\r\n\r\nexport default class ScaledDrag extends React.Component<DragProps, DragState> {\r\n  static defaultProps = {\r\n    captureDragArea: true,\r\n    resetOnStart: false,\r\n    resetOnEnd: false,\r\n  };\r\n\r\n  state = {\r\n    x: undefined,\r\n    y: undefined,\r\n    dx: this.props.startX || 0,\r\n    dy: this.props.startY || 0,\r\n    isDragging: false,\r\n  };\r\n\r\n  handleDragStart = (event: MouseOrTouchEvent) => {\r\n    const { onDragStart, resetOnStart, scaleX, scaleY } = this.props;\r\n    event.persist();\r\n    this.setState(\r\n      ({ dx, dy }) => {\r\n        const point = localPoint(event) || { x: 0, y: 0 };\r\n        return {\r\n          isDragging: true,\r\n          dx: resetOnStart ? 0 : dx,\r\n          dy: resetOnStart ? 0 : dy,\r\n          x: resetOnStart ? Math.floor(point.x / scaleX) : Math.floor(point.x / scaleX) - dx,\r\n          y: resetOnStart ? Math.floor(point.y / scaleY) : Math.floor(point.y / scaleY) - dy,\r\n        };\r\n      },\r\n      onDragStart &&\r\n        (() => {\r\n          onDragStart({ ...this.state, event });\r\n        }),\r\n    );\r\n  };\r\n\r\n  handleDragMove = (event: MouseOrTouchEvent) => {\r\n    const { onDragMove, scaleX, scaleY } = this.props;\r\n    event.persist();\r\n\r\n    this.setState(\r\n      ({ x, y, isDragging }) => {\r\n        const point = localPoint(event) || { x: 0, y: 0 };\r\n        return isDragging\r\n          ? {\r\n              isDragging: true,\r\n              dx: (Math.floor(point.x / scaleX) - (x || 0)),\r\n              dy: (Math.floor(point.y / scaleY) - (y || 0)),\r\n            }\r\n          : null;\r\n      },\r\n      onDragMove &&\r\n        (() => {\r\n          if (this.state.isDragging) onDragMove({ ...this.state, event });\r\n        }),\r\n    );\r\n  };\r\n\r\n  handleDragEnd = (event: MouseOrTouchEvent) => {\r\n    const { onDragEnd, resetOnEnd } = this.props;\r\n    event.persist();\r\n    \r\n    this.setState(state => (\r\n      { \r\n        isDragging: false,\r\n        dx: resetOnEnd ? 0 : state.dx,\r\n        dy: resetOnEnd ? 0 : state.dy\r\n      }),\r\n      onDragEnd &&\r\n        (() => {\r\n          onDragEnd({ ...this.state, event });\r\n        }),\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { x, y, dx, dy, isDragging } = this.state;\r\n    const { children, width, height, captureDragArea } = this.props;\r\n    return (\r\n      <>\r\n        {isDragging && captureDragArea && (\r\n          <rect\r\n            width={width}\r\n            height={height}\r\n            onMouseMove={this.handleDragMove}\r\n            onMouseUp={this.handleDragEnd}\r\n            fill=\"transparent\"\r\n          />\r\n        )}\r\n        {children({\r\n          x,\r\n          y,\r\n          dx,\r\n          dy,\r\n          isDragging,\r\n          dragEnd: this.handleDragEnd,\r\n          dragMove: this.handleDragMove,\r\n          dragStart: this.handleDragStart,\r\n        })}\r\n      </>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport ScaledDrag from './ScaledDrag.tsx';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nexport default class Node extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            x: 0,\r\n            y: 0\r\n        };\r\n    }\r\n\r\n    render() {\r\n        let color = 'gray';\r\n        const state = this.props.item.state;\r\n        if (state === 1)\r\n            color = 'red';\r\n        else if (state === 2)\r\n            color = 'orange';\r\n        else if (state === 3)\r\n            color = 'green';\r\n\r\n        return(\r\n            <ScaledDrag width={this.props.width} \r\n                    height={this.props.height}\r\n                    startX={this.props.item.initialX}\r\n                    startY={this.props.item.initialY}\r\n                    scaleX={this.props.zoom.transformMatrix.scaleX}\r\n                    scaleY={this.props.zoom.transformMatrix.scaleY}>\r\n                {({ dragStart, dragEnd, dragMove, isDragging, dx, dy }) =>\r\n                    (false && isDragging) || (\r\n                        <g key={`node-${this.props.item.id}`}\r\n                            transform={`translate(${dx}, ${dy})`}\r\n                            style={{cursor: isDragging ? 'move' : 'pointer' }} >\r\n                            <g onMouseMove={event => {\r\n                                    this.props.handleDragMove(this.props.item.id, dx, dy);\r\n                                    dragMove(event);\r\n                                }}\r\n                                onMouseDown={event => {\r\n                                    this.props.handleDragStart(this.props.item.id);\r\n                                    dragStart(event);\r\n                                }}\r\n                                onMouseUp={event => {\r\n                                    this.props.handleDragEnd(this.props.item, dx, dy);\r\n                                    dragEnd(event);\r\n                                }}\r\n                                onTouchMove={event => {\r\n                                    this.props.handleDragMove(this.props.item.id, dx, dy);\r\n                                    dragMove(event);\r\n                                }}\r\n                                onTouchStart={event => {\r\n                                    this.props.handleDragStart(this.props.item.id);\r\n                                    dragStart(event);\r\n                                }}\r\n                                onTouchEnd={event => {\r\n                                    this.props.handleDragEnd(this.props.item, dx, dy);\r\n                                    dragEnd(event);\r\n                                }}>\r\n                                {/* NOTE: Oh wow, this has been one of my most annoying problems.\r\n                                    Basically, no other events could work properly with the events\r\n                                    above. I've tried onClick, onMouseDown and onTouchEnd, trying\r\n                                    different kinds of functions to run. But only onPointerUp worked! */}\r\n                                <g onPointerUp={() => this.props.toggleNodeOptions(this.props.item.id)}>\r\n                                    <rect data-name={`node-${this.props.item.id}`}\r\n                                            className={`node-root fill-current text-${color}-600`} \r\n                                            width=\"300\" \r\n                                            height=\"100\" \r\n                                            rx=\"7\"\r\n                                            style={{stroke: this.props.selectedNodeId === this.props.item.id ? \"#4a5568\" : \"none\", strokeWidth: 7}}\r\n                                            filter=\"url(#nodeShadow)\"\r\n                                            />\r\n                                    <foreignObject width=\"300\" \r\n                                                    height=\"100\">\r\n                                            <div className=\"p-4 flex items-center w-full h-full pointer-events-none\">\r\n                                                <div className={`flex flex-col w-full text-${color}-900`}>\r\n                                                    <span className=\"text-2xl font-bold truncate select-none\">\r\n                                                        {this.props.item.name}\r\n                                                    </span>\r\n                                                    <span className=\"text-xl font-medium truncate select-none\">\r\n                                                        {`${this.props.item.connectedTo.length} subgoals`} {/*&#x2022; {`${10} in list`}*/}\r\n                                                    </span>\r\n                                                </div>\r\n                                            </div>\r\n                                    </foreignObject>\r\n                                </g>\r\n\r\n                                {/*\r\n                                <text className=\"fill-current text-gray-100 text-2xl\" x={15} y={60}>{`(${dx}, ${dy})`}</text>\r\n                                <text className=\"fill-current text-gray-100 text-2xl\" x={15} y={90}>{`(${item.initialX}, ${item.initialY})`}</text>\r\n                                */}\r\n                            </g>\r\n\r\n                            {(this.props.selectedNodeId === this.props.item.id &&\r\n                                <>\r\n                                    <g onClick={() => this.props.handleOpenViewNode(this.props.item.name, this.props.item.description)}>\r\n                                        <rect className=\"fill-current text-gray-500\"\r\n                                            x=\"23\"\r\n                                            y=\"-90\"\r\n                                            width=\"74\"\r\n                                            height=\"74\"\r\n                                            rx=\"10\"\r\n                                            filter=\"url(#nodeShadow)\"/>\r\n                                        <foreignObject x=\"23\"\r\n                                                    y=\"-90\"\r\n                                                    width=\"74\" \r\n                                                    height=\"74\" \r\n                                                    className=\"text-4xl text-gray-800 pointer-events-none\">\r\n                                            <div className=\"flex items-center justify-center w-full h-full\">      \r\n                                                <FontAwesomeIcon icon=\"eye\" />\r\n                                            </div>\r\n                                        </foreignObject>\r\n                                    </g>\r\n                                    <g onClick={() => this.props.handleOpenEditNode(this.props.item.name, this.props.item.description)}>\r\n                                        <rect className=\"fill-current text-gray-500\"\r\n                                            x=\"113\"\r\n                                            y=\"-90\"\r\n                                            width=\"74\"\r\n                                            height=\"74\"\r\n                                            rx=\"10\"\r\n                                            filter=\"url(#nodeShadow)\"/>\r\n                                        <foreignObject x=\"113\"\r\n                                                    y=\"-90\"\r\n                                                    width=\"74\" \r\n                                                    height=\"74\" \r\n                                                    className=\"text-4xl text-gray-800 pointer-events-none\">\r\n                                            <div className=\"flex items-center justify-center w-full h-full\">      \r\n                                                <FontAwesomeIcon icon=\"pencil-alt\" />\r\n                                            </div>\r\n                                        </foreignObject>\r\n                                    </g>\r\n                                    <g onClick={() => this.props.handleOnNodeDelete(this.props.item.id)}>\r\n                                        <rect className=\"fill-current text-gray-500\"\r\n                                            x=\"203\"\r\n                                            y=\"-90\"\r\n                                            width=\"74\"\r\n                                            height=\"74\"\r\n                                            rx=\"10\"\r\n                                            filter=\"url(#nodeShadow)\"/>\r\n                                        <foreignObject x=\"203\"\r\n                                                    y=\"-90\"\r\n                                                    width=\"74\" \r\n                                                    height=\"74\"  \r\n                                                    className=\"text-4xl text-gray-800 pointer-events-none\">\r\n                                            <div className=\"flex items-center justify-center w-full h-full\">      \r\n                                                <FontAwesomeIcon icon=\"trash-alt\" />\r\n                                            </div>\r\n                                        </foreignObject>\r\n                                    </g>\r\n\r\n\r\n                                    <g onClick={() => this.props.handleOnNodeUpdateState(this.props.item.id, this.props.item.state === 3 ? 0 : 3)}>\r\n                                        <rect className=\"fill-current text-green-500\"\r\n                                            x=\"23\"\r\n                                            y=\"115\"\r\n                                            width=\"74\"\r\n                                            height=\"74\"\r\n                                            rx=\"10\"\r\n                                            filter=\"url(#nodeShadow)\"/>\r\n                                        <foreignObject x=\"23\"\r\n                                                    y=\"115\"\r\n                                                    width=\"74\" \r\n                                                    height=\"74\" \r\n                                                    className=\"text-4xl text-green-800 pointer-events-none\">\r\n                                            <div className=\"flex items-center justify-center w-full h-full\">      \r\n                                                <FontAwesomeIcon icon=\"check\" />\r\n                                            </div>\r\n                                        </foreignObject>\r\n                                    </g>\r\n                                    <g onClick={() => this.props.handleOnNodeUpdateState(this.props.item.id, this.props.item.state === 2 ? 0 : 2)}>\r\n                                        <rect className=\"fill-current text text-orange-500\"\r\n                                            x=\"113\"\r\n                                            y=\"115\"\r\n                                            width=\"74\"\r\n                                            height=\"74\"\r\n                                            rx=\"10\"\r\n                                            filter=\"url(#nodeShadow)\"/>\r\n                                        <foreignObject x=\"113\"\r\n                                                    y=\"115\"\r\n                                                    width=\"74\" \r\n                                                    height=\"74\" \r\n                                                    className=\"text-4xl text-orange-800 pointer-events-none\">\r\n                                            <div className=\"flex items-center justify-center w-full h-full\">      \r\n                                                <FontAwesomeIcon icon=\"hourglass-half\" />\r\n                                            </div>\r\n                                        </foreignObject>\r\n                                    </g>\r\n                                    <g onClick={() => this.props.handleOnNodeUpdateState(this.props.item.id, this.props.item.state === 1 ? 0 : 1)}>\r\n                                        <rect className=\"fill-current text-red-500\"\r\n                                            x=\"203\"\r\n                                            y=\"115\"\r\n                                            width=\"74\"\r\n                                            height=\"74\"\r\n                                            rx=\"10\"\r\n                                            filter=\"url(#nodeShadow)\"/>\r\n                                        <foreignObject x=\"203\"\r\n                                                    y=\"115\"\r\n                                                    width=\"74\" \r\n                                                    height=\"74\"  \r\n                                                    className=\"text-4xl text-red-800 pointer-events-none\">\r\n                                            <div className=\"flex items-center justify-center w-full h-full\">      \r\n                                                <FontAwesomeIcon icon=\"times\" />\r\n                                            </div>\r\n                                        </foreignObject>\r\n                                    </g>\r\n                                </>\r\n                            )}\r\n                            <ScaledDrag key={`edge-${this.props.item.id}`}\r\n                                        width={this.props.width}\r\n                                        height={this.props.height}\r\n                                        scaleX={this.props.zoom.transformMatrix.scaleX}\r\n                                        scaleY={this.props.zoom.transformMatrix.scaleY}\r\n                                        onDragStart={() => this.props.handleDragStart(this.props.item.id)}\r\n                                        resetOnStart={true}\r\n                                        resetOnEnd={true}>\r\n                                {({ dragStart, dragEnd, dragMove, isDragging, dx, dy }) => \r\n                                    (false && isDragging) || (\r\n                                        <g transform={`translate(${dx}, ${dy})`}\r\n                                            className=\"z-30\"\r\n                                            onMouseMove={dragMove}\r\n                                            onMouseDown={dragStart}\r\n                                            onMouseUp={event => {\r\n                                                this.props.handleEdgeCtrlDragEnd(event, this.props.item, dx, dy);\r\n                                                dragEnd(event);\r\n                                            }}\r\n                                            onTouchMove={dragMove}\r\n                                            onTouchStart={dragStart}\r\n                                            onTouchEnd={event => {\r\n                                                this.props.handleEdgeCtrlDragEnd(this.props.item, dx, dy);\r\n                                                dragEnd(event);\r\n                                            }}>\r\n                                            <circle cx=\"300\"\r\n                                                    cy=\"50\"\r\n                                                    r=\"20\"\r\n                                                    style={{visibility: \"visible\"}}\r\n                                                    className=\"fill-current text-gray-400\"/>\r\n                                            <circle cx=\"300\"\r\n                                                    cy=\"50\"\r\n                                                    r=\"20\"\r\n                                                    stroke=\"#2d3748\"\r\n                                                    strokeWidth=\"5\"\r\n                                                    fill=\"none\"\r\n                                                    className=\"pointer-events-none\"/>\r\n                                            <foreignObject x=\"280\"\r\n                                                        y=\"30\"\r\n                                                        width=\"40\" \r\n                                                        height=\"40\" \r\n                                                        className=\"text-2xl text-gray-800 pointer-events-none\">\r\n                                                <div className=\"flex items-center justify-center w-full h-full\">      \r\n                                                    <FontAwesomeIcon icon=\"plus\" />\r\n                                                </div>\r\n                                            </foreignObject>\r\n                                        </g>\r\n                                    )\r\n                                }\r\n                            </ScaledDrag>\r\n                        </g>\r\n                    )\r\n                }\r\n            </ScaledDrag>\r\n        );\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport { Zoom } from '@vx/zoom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport CKEditor from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport DOMPurify from 'dompurify';\r\n\r\nimport '../assets/App.css';\r\nimport '../assets/content-styles.css';\r\n\r\nimport DBService from '../services/DBService';\r\nimport Node from './Node';\r\nimport Modal from './Modal';\r\n\r\nconst initialTransformZoom = {\r\n    scaleX: 1/2,\r\n    scaleY: 1/2,\r\n    translateX: 100,\r\n    translateY: 100,\r\n    skewX: 0,\r\n    skewY: 0,\r\n};\r\n\r\nexport default class WorkArea extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            projectId: 0,\r\n            draggableItems: [],\r\n            isDirtyDB: false,\r\n            isDirtyDOM: false,\r\n            nodeCtrlHidden: true,\r\n            selectedNodeId: 0,\r\n            edges: {},\r\n            openNodeModal: null,\r\n            nodeModalMode: 0, // 0 for viewing node, 1 for creating node, 2 for editing\r\n            nodeTitle: \"\", // used for editing\r\n            nodeDescription: \"\",\r\n            nodePosX: 0,\r\n            nodePosY: 0,\r\n            linkedItemId: 0\r\n        };\r\n\r\n        this.handleDragStart = this.handleDragStart.bind(this);\r\n        this.handleDragMove = this.handleDragMove.bind(this);\r\n        this.handleDragEnd = this.handleDragEnd.bind(this);\r\n        this.handleEdgeCtrlDragEnd = this.handleEdgeCtrlDragEnd.bind(this);\r\n\r\n        this.handleOnEdgeCreated = this.handleOnEdgeCreated.bind(this);\r\n        this.handleOnEdgeDelete = this.handleOnEdgeDelete.bind(this);\r\n\r\n        this.handleOpenViewNode = this.handleOpenViewNode.bind(this);\r\n        this.handleOpenCreateNode = this.handleOpenCreateNode.bind(this);\r\n        this.handleOpenEditNode = this.handleOpenEditNode.bind(this);\r\n\r\n        this.handleOnNodeCreate = this.handleOnNodeCreate.bind(this);\r\n        this.handleOnNodeUpdate = this.handleOnNodeUpdate.bind(this);\r\n        this.handleOnNodeDelete = this.handleOnNodeDelete.bind(this);\r\n        this.handleOnNodeUpdateState = this.handleOnNodeUpdateState.bind(this);\r\n\r\n        this.toggleNodeCtrl = this.toggleNodeCtrl.bind(this);\r\n        this.toggleNodeOptions = this.toggleNodeOptions.bind(this);\r\n        this.checkGraphCycleExists = this.checkGraphCycleExists.bind(this);\r\n    }\r\n    \r\n    componentDidUpdate() {\r\n        const id = parseInt(this.props.projectId);\r\n        if (this.state.projectId !== id || this.state.isDirtyDB) {\r\n            DBService.nodes.where('projectId').equals(id).toArray().then(nodes => {\r\n                this.setState({\r\n                    projectId: id,\r\n                    draggableItems: nodes,\r\n                    isDirtyDB: false\r\n                });\r\n            }).catch(error => {\r\n                console.error(error.stack || error);\r\n            });\r\n        }\r\n\r\n        if (this.state.isDirtyDOM) {\r\n            // Initialize the edge positions here\r\n            this.state.draggableItems.forEach(item => {\r\n                this.handleDragMove(item.id, item.initialX, item.initialY);\r\n            });\r\n\r\n            this.setState({isDirtyDOM: false});\r\n        }\r\n    }\r\n\r\n    handleDragStart(id) {\r\n        // In chrome, this somehow prevents a child onclick to run\r\n        // Solved by using onPointerUp instead of  onClick\r\n        const array = [].concat(this.state.draggableItems);\r\n        const index = array.indexOfWhen(item => item.id === id);\r\n        const raised = array.splice(index, 1)[0];\r\n        const array2 = array.concat(raised);\r\n\r\n        \r\n        this.setState({ draggableItems: array2 });\r\n    }\r\n\r\n    handleDragMove(id, dx, dy) {\r\n        // How will we pass this to the edge itself?\r\n        const edges = this.state.edges[id];\r\n        if (edges && edges.length > 0) {\r\n            edges.forEach(edge => {\r\n                edge.callable(dx, dy);\r\n            });\r\n        }\r\n    }\r\n\r\n    handleDragEnd(item, dx, dy) {\r\n        // only update if there's been significant change to the item position\r\n        if (Math.abs(item.initialX - dx) < 1 ||\r\n            Math.abs(item.initialY - dy) < 1)\r\n            return;\r\n\r\n        // Save changes immediately to db\r\n        DBService.nodes.update(item.id, {initialX: dx, initialY: dy}).then(updated => {\r\n            \r\n            this.setState({isDirtyDB: true});\r\n            // Show a toast or an out of the way notif for changes saved\r\n        });\r\n    }\r\n\r\n    handleEdgeCtrlDragEnd(event, item, dx, dy) {\r\n        // TODO: Check if clientX and clientY from events work\r\n        const screenX = Math.floor(event.clientX || event.changedTouches[0].clientX);\r\n        const screenY = Math.floor(event.clientY || event.changedTouches[0].clientY);\r\n\r\n        const x = item.initialX + dx;\r\n        const y = item.initialY + dy;\r\n\r\n        const elements = document.elementsFromPoint(screenX, screenY);\r\n        const element = elements.find(e => e.getAttribute('data-name'));\r\n        if (!element) {\r\n            console.log(element);\r\n            this.handleOpenCreateNode(x + 300, y, item.id);\r\n            return;\r\n        }\r\n\r\n        const name = element.getAttribute('data-name');\r\n        if (!name)\r\n            return;\r\n\r\n        if (name === `node-${item.id}`)\r\n            return; // this means the interacted item is this item\r\n\r\n        \r\n        // register this new id to the connected array of this item\r\n        let other = {};\r\n        DBService.nodes.where('projectId')\r\n                       .equals(this.state.projectId)\r\n                       .toArray()\r\n        .then(items => {\r\n            const otherId = parseInt(name.substring(5));\r\n            other = items.find(n => n.id === otherId);\r\n    \r\n            // get current connected array from db\r\n            // TODO: If we want this app to be usable by concurrent users, we'll \r\n            // definitely need to update from the db with every action that could \r\n            // change the db that we do. But then, we'll need to first use a different \r\n            // db instead of indexed db\r\n            const node = item; //nodes.find(n => n.id === item.id); // Why are we searching for the item that's passed as an arg?!\r\n            const index = node.connectedTo.indexOf(other.id);\r\n    \r\n            if (index < 0) {\r\n                // Check if adding this node creates a cycle in the graph\r\n                if (this.checkGraphCycleExists(items, other.connectedTo, node.id))\r\n                    return;\r\n    \r\n                node.connectedTo.push(other.id); // add id if not found\r\n                other.connectedFrom.push(node.id);\r\n            }\r\n\r\n            return DBService.nodes.update(node.id, {connectedTo: node.connectedTo});\r\n        }).then(updated => {\r\n            return DBService.nodes.update(other.id, {connectedFrom: other.connectedFrom});\r\n        }).then(updated => {\r\n            this.setState({isDirtyDB: true});\r\n        });\r\n    }\r\n\r\n    // Starting arr is the connectedTo arr of the node\r\n    // the user wants to connect to\r\n    // The id is the id of the node the user is\r\n    // connecting from\r\n    checkGraphCycleExists(items, connectedTo, id) {\r\n        if (connectedTo.some(e => e === id))\r\n            return true;\r\n\r\n        var result = false;\r\n\r\n        for (var i = 0; i < connectedTo.length; i++) {\r\n            const e = connectedTo[i];\r\n            // Get the connectedTo array of the node with e as the id\r\n            const newArr = items.find(n => n.id === e).connectedTo;\r\n            result = this.checkGraphCycleExists(newArr, id);\r\n            if (result)\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    handleOnEdgeCreated(fromId, toId, callable) {\r\n        const edges = this.state.edges;\r\n        if(!edges[fromId])\r\n            edges[fromId] = [];\r\n\r\n        const edge = {\r\n            to: toId,\r\n            callable: callable\r\n        };\r\n        edges[fromId].push(edge);\r\n        this.setState({edges: edges, isDirtyDOM: true});\r\n    }\r\n\r\n    handleOnEdgeDelete(itemId, otherId) {\r\n        let connectedFrom = [];\r\n        DBService.nodes.where('projectId')\r\n                       .equals(this.state.projectId)\r\n                       .toArray()\r\n        .then(items => {\r\n            const connectedTo = items.find(n => n.id === itemId).connectedTo;\r\n            connectedFrom = items.find(n => n.id === otherId).connectedFrom;\r\n            const indexTo = connectedTo.indexOf(otherId);\r\n            const indexFrom = connectedFrom.indexOf(itemId);\r\n            if (indexTo < 0 || indexFrom < 0)\r\n                return;\r\n    \r\n            connectedTo.splice(indexTo, 1); // remove if in array already\r\n            connectedFrom.splice(indexFrom, 1);\r\n    \r\n            // Also remove the callables from the edges array\r\n            const edges = this.state.edges;\r\n            edges[itemId].removeIf(edge => edge.to === otherId);\r\n            edges[otherId].removeIf(edge => edge.to === itemId);\r\n    \r\n            this.setState({edges: edges});\r\n\r\n            return DBService.nodes.update(itemId, {connectedTo: connectedTo});\r\n        }).then(updated => {\r\n            return DBService.nodes.update(otherId, {connectedFrom: connectedFrom});\r\n        }).then(updated => {\r\n            this.setState({isDirtyDB: true});\r\n        })\r\n    }\r\n\r\n    handleOnNodeCreate(title, description) {\r\n        if (!title)\r\n            return false;\r\n\r\n        const {projectId, nodePosX, nodePosY, linkedItemId} = this.state;\r\n        let nodeId = 0;\r\n        if (linkedItemId) {\r\n            DBService.addNode(projectId, title, description, 0, nodePosX, nodePosY, [linkedItemId], []).then(id => {\r\n                nodeId = id;\r\n                return DBService.nodes.get(linkedItemId);\r\n            }).then(item => {\r\n                const connectedTo = item.connectedTo;\r\n                connectedTo.push(nodeId);\r\n                return DBService.nodes.update(item.id, {connectedTo: connectedTo});\r\n            }).then(() => {\r\n                this.setState({isDirtyDB: true});\r\n            }).catch(error => {\r\n                console.error(error.stack || error);\r\n            });\r\n        } else {\r\n            DBService.addNode(projectId, title, description, nodePosX, nodePosY, [], []).then(() => {\r\n                this.setState({isDirtyDB: true});\r\n            }).catch(error => {\r\n                console.error(error.stack || error);\r\n            });\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    handleOnNodeUpdate(itemId, title, description) {\r\n        if (!title)\r\n            return false;\r\n\r\n        DBService.nodes.update(itemId, {name: title, description: description}).then(() => {\r\n            this.setState({isDirtyDB: true});\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    handleOnNodeUpdateState(itemId, state) {\r\n        DBService.nodes.update(itemId, {state: state}).then(() => {\r\n            this.setState({isDirtyDB: true});\r\n        });\r\n    }\r\n\r\n    handleOnNodeDelete(id) {\r\n        DBService.nodes.where('projectId')\r\n                       .equals(this.state.projectId)\r\n                       .toArray()\r\n        .then(items => {\r\n            const node = items.find(item => item.id === id);\r\n            // TODO: This is very inefficient, better to track all\r\n            // the changes first then save changes afterwards\r\n            node.connectedTo.forEach(e => {\r\n                this.handleOnEdgeDelete(node.id, e);\r\n            });\r\n    \r\n            node.connectedFrom.forEach(e => {\r\n                this.handleOnEdgeDelete(e, node.id);\r\n            });\r\n    \r\n            return DBService.nodes.delete(id);\r\n        }).then(() => {\r\n            this.setState({isDirtyDB: true});\r\n        });\r\n    }\r\n\r\n    handleOpenViewNode(title, description) {\r\n        this.state.openNodeModal();\r\n        this.setState({nodeModalMode: 0, nodeTitle: title, nodeDescription: description});\r\n    }\r\n\r\n    handleOpenCreateNode(dx = 0, dy = 0, linkedItemId = 0) {\r\n        this.state.openNodeModal();\r\n        this.setState({nodeModalMode: 1, nodePosX: dx, nodePosY: dy, linkedItemId: linkedItemId});\r\n    }\r\n\r\n    handleOpenEditNode(title, description) {\r\n        this.state.openNodeModal();\r\n        this.setState({nodeModalMode: 2, nodeTitle: title, nodeDescription: description});\r\n    }\r\n\r\n    toggleNodeCtrl() {\r\n        this.setState(state => ({nodeCtrlHidden: !state.nodeCtrlHidden}));\r\n    }\r\n\r\n    toggleNodeOptions(id) {\r\n        if (this.state.selectedNodeId === id)\r\n            this.setState({selectedNodeId: 0});\r\n        else {\r\n            this.setState({selectedNodeId: id});\r\n            this.handleDragStart(id);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const width = this.props.width;\r\n        const height = this.props.height;\r\n        return(\r\n            <>\r\n                <Zoom width={width} \r\n                    height={height}\r\n                    scaleXMin={1/4}\r\n                    scaleXMax={2}\r\n                    scaleYMin={1/4}\r\n                    scaleYMax={2}\r\n                    transformMatrix={initialTransformZoom}>\r\n                    {zoom => (\r\n                        <div className=\"relative bg-gray-300\">\r\n                            <svg width={width} height={height} style={{cursor: zoom.isDragging ? 'grabbing' : 'grab' }}>\r\n                                <defs>\r\n                                    <filter id=\"nodeShadow\" x=\"-50%\" y=\"-50%\" width=\"160%\" height=\"160%\">\r\n                                        <feOffset result=\"offOut\" in=\"SourceGraphic\" dy=\"4\" />\r\n                                        <feGaussianBlur result=\"blurOut\" in=\"offOut\" stdDeviation=\"4\" />\r\n                                        <feBlend in=\"SourceGraphic\" in2=\"blurOut\" mode=\"normal\" />\r\n                                    </filter>\r\n                                </defs>\r\n                                <rect width={width}\r\n                                      height={height}\r\n                                      fill=\"transparent\"\r\n                                      onTouchStart={zoom.dragStart}\r\n                                      onTouchMove={zoom.dragMove}\r\n                                      onTouchEnd={() => {\r\n                                          this.toggleNodeOptions(0);\r\n                                          zoom.dragEnd();\r\n                                      }}\r\n                                      onMouseDown={zoom.dragStart}\r\n                                      onMouseMove={zoom.dragMove}\r\n                                      onMouseUp={() => {\r\n                                          this.toggleNodeOptions(0);\r\n                                          zoom.dragEnd();\r\n                                      }}\r\n                                      onMouseLeave={() => {\r\n                                          if (zoom.isDragging) zoom.dragEnd();\r\n                                      }} />\r\n                                \r\n                                <g name=\"node-root\"\r\n                                   transform={zoom.toString()}>\r\n                                    {this.state.draggableItems.map((item, i) => (\r\n                                        <g key={`${item.id}`} >\r\n                                            {item.connectedTo.map(id => (\r\n                                                <EdgeStart key={`edge-${item.id}-${id}`} \r\n                                                           changePosCallable={callable => {\r\n                                                               this.handleOnEdgeCreated(item.id, id, callable); \r\n                                                           }}>\r\n                                                    {({startDx, startDy}) => (\r\n                                                        <EdgeEnd changePosCallable={callable => {\r\n                                                            this.handleOnEdgeCreated(id, item.id, callable); \r\n                                                        }}>\r\n                                                            {({endDx, endDy}) => (\r\n                                                                <Edge startDx={startDx}\r\n                                                                      startDy={startDy}\r\n                                                                      endDx={endDx}\r\n                                                                      endDy={endDy}\r\n                                                                      handleOnClick={() => this.handleOnEdgeDelete(item.id, id)}>\r\n                                                                          \r\n                                                                    {({midPointX, midPointY, isHovered}) => (\r\n                                                                        <foreignObject visibility={isHovered ? 'visible' : 'hidden'}\r\n                                                                                       x={midPointX - 15}\r\n                                                                                       y={midPointY - 10}\r\n                                                                                       width=\"30\"\r\n                                                                                       height=\"20\"\r\n                                                                                       className=\"pointer-events-none\">\r\n                                                                            <div className=\"w-full h-full flex items-center justify-center bg-gray-800\">\r\n                                                                                <FontAwesomeIcon className=\"text-gray-300\" icon=\"times\" />\r\n                                                                            </div>\r\n                                                                        </foreignObject>\r\n                                                                    )}\r\n                                                                </Edge>\r\n                                                            )}\r\n                                                        </EdgeEnd>\r\n                                                    )}\r\n                                                </EdgeStart>\r\n                                            ))}\r\n\r\n                                            <Node item={item}\r\n                                                width={width}\r\n                                                height={height}\r\n                                                zoom={zoom}\r\n                                                selectedNodeId={this.state.selectedNodeId}\r\n                                                handleDragStart={this.handleDragStart}\r\n                                                handleDragMove={this.handleDragMove}\r\n                                                handleDragEnd={this.handleDragEnd}\r\n                                                handleEdgeCtrlDragEnd={this.handleEdgeCtrlDragEnd}\r\n                                                handleOnNodeUpdateState={this.handleOnNodeUpdateState}\r\n                                                handleOnNodeDelete={this.handleOnNodeDelete}\r\n                                                handleOpenViewNode={this.handleOpenViewNode}\r\n                                                handleOpenCreateNode={this.handleOpenCreateNode}\r\n                                                handleOpenEditNode={this.handleOpenEditNode}\r\n                                                toggleNodeOptions={this.toggleNodeOptions}/>\r\n                                        </g>\r\n                                    ))}\r\n                                </g>\r\n                            </svg>\r\n                            <div className=\"pin-bot-right absolute pb-4 pr-4 sm:pb-6 sm:pr-6 flex flex-col items-end\">\r\n                                <button className=\"px-2 lg:px-3 py-1 mb-1 rounded text-sm lg:text-xl bg-gray-400 hover:bg-gray-900 text-gray-900 hover:text-gray-400\"\r\n                                        onClick={() => zoom.scale({scaleX: 1.2, scaleY: 1.2})}>\r\n                                    <FontAwesomeIcon icon=\"plus\" />\r\n                                </button>\r\n                                <button className=\"px-2 lg:px-3 py-1 mb-4 rounded text-sm lg:text-xl bg-gray-400 hover:bg-gray-900 text-gray-900 hover:text-gray-400\"\r\n                                        onClick={() => zoom.scale({scaleX: 0.8, scaleY: 0.8})}>\r\n                                    <FontAwesomeIcon icon=\"minus\" />\r\n                                </button>\r\n                                <button className=\"px-2 py-1 rounded text-xs lg:text-base select-none bg-gray-400 hover:bg-gray-900 text-gray-900 hover:text-gray-400\" onClick={zoom.reset}>\r\n                                    Reset\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"pin-bot-left absolute pb-4 pl-4 sm:pb-6 sm:pl-6 flex flex-row items-center\">\r\n                                <button className=\"px-4 py-2 sm:px-6 sm:py-4 z-10 rounded-full shadow-md text-2xl bg-gray-700 hover:bg-gray-900 text-gray-300 hover:text-gray-100\" onClick={this.toggleNodeCtrl}>\r\n                                    <FontAwesomeIcon className=\"shadow-inner\" icon=\"plus\" />\r\n                                </button>\r\n                                <div className={`${this.state.nodeCtrlHidden ? 'hidden' : ''} -ml-8 pl-10 pr-2 py-2 sm:-ml-8 sm:pl-12 sm:pr-4 sm:py-2 rounded-r-lg shadow-md bg-gray-100`}>\r\n                                    <button className=\"px-3 py-1 sm:px-5 sm:py-3 rounded-lg shadow font-semibold bg-gray-400\"\r\n                                            onClick={() => this.handleOpenCreateNode()}>\r\n                                        Node\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </Zoom>\r\n                {/* Modals here */}\r\n                <Modal title={`${this.state.nodeModalMode === 0 ? 'View' : \r\n                                this.state.nodeModalMode === 1 ? 'Create New' : 'Edit'} Node`}\r\n                       openModal={callable => {\r\n                            if (!this.state.openNodeModal)\r\n                                this.setState({openNodeModal: callable});\r\n                        }}>\r\n                    {({closeModal}) => (\r\n                        (this.state.nodeModalMode === 0 &&\r\n                            <NodeView title={this.state.nodeTitle}\r\n                                        description={this.state.nodeDescription}\r\n                                        handleCloseModal={closeModal} />\r\n                        ) ||\r\n                        (this.state.nodeModalMode === 1 &&\r\n                            <NodeForm title=\"\"\r\n                                        description=\"\"\r\n                                        handleOnNodeCreate={this.handleOnNodeCreate}\r\n                                        handleCloseModal={closeModal} />\r\n                        ) ||\r\n                        (this.state.nodeModalMode === 2 &&\r\n                            <NodeForm itemId={this.state.selectedNodeId}\r\n                                        title={this.state.nodeTitle}\r\n                                        description={this.state.nodeDescription}\r\n                                        handleOnNodeUpdate={this.handleOnNodeUpdate}\r\n                                        handleCloseModal={closeModal} />\r\n                        )\r\n                    )}\r\n                </Modal>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nArray.prototype.removeIf = function(predicate) {\r\n    let i = this.length;\r\n    while (i--) {\r\n        if (predicate(this[i]))\r\n            this.splice(i, 1);\r\n    }\r\n}\r\n\r\nArray.prototype.indexOfWhen = function(predicate) {\r\n    let i = 0;\r\n    while (i < this.length) {\r\n        if (predicate(this[i]))\r\n            return i;\r\n        i++;\r\n    }\r\n}\r\n\r\nclass EdgeStart extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            startDx: 0,\r\n            startDy: 0\r\n        };\r\n        \r\n        this.handlePosChanged = this.handlePosChanged.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.changePosCallable(this.handlePosChanged);\r\n    }\r\n\r\n    handlePosChanged(dx, dy) {\r\n        this.setState({startDx: dx, startDy: dy});\r\n    }\r\n\r\n    render() {\r\n        const {startDx, startDy} = this.state;\r\n        const {children} = this.props;\r\n        return (\r\n            <>\r\n            {children({ startDx, startDy })}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nclass EdgeEnd extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            endDx: 0,\r\n            endDy: 0\r\n        };\r\n\r\n        this.handlePosChanged = this.handlePosChanged.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.changePosCallable(this.handlePosChanged);\r\n    }\r\n\r\n    handlePosChanged(dx, dy) {\r\n        this.setState({endDx: dx, endDy: dy});\r\n    }\r\n\r\n    render() {\r\n        const {endDx, endDy} = this.state;\r\n        const {children} = this.props;\r\n        return (\r\n            <>\r\n            {children({ endDx, endDy })}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nclass Edge extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            isHovered: false\r\n        };\r\n\r\n        this.handleOnEnter = this.handleOnEnter.bind(this);\r\n        this.handleOnExit = this.handleOnExit.bind(this);\r\n    }\r\n\r\n    handleOnEnter() {\r\n        this.setState({isHovered: true});\r\n    }\r\n\r\n    handleOnExit() {\r\n        this.setState({isHovered: false});\r\n    }\r\n\r\n    render() {\r\n        const midPointX = ((this.props.endDx - this.props.startDx - 300) / 2) + (this.props.startDx + 300);\r\n        const midPointY = ((this.props.endDy + 50 - this.props.startDy - 50) / 2) + (this.props.startDy + 50);\r\n\r\n        const {isHovered} = this.state;\r\n        const {children} = this.props;\r\n        return(\r\n            <>\r\n                <path d={`M${this.props.startDx + 300} ${this.props.startDy + 50} Q${this.props.startDx + 350} ${this.props.startDy + 50} ${midPointX} ${midPointY} Q${this.props.endDx - 50} ${this.props.endDy + 50} ${this.props.endDx} ${this.props.endDy + 50}`} \r\n                    className=\"stroke-current text-gray-800 pointer-events-none\"\r\n                    strokeWidth=\"5\" \r\n                    fill=\"none\" />\r\n                <path d={`M${this.props.startDx + 300} ${this.props.startDy + 50} Q${this.props.startDx + 350} ${this.props.startDy + 50} ${midPointX} ${midPointY} Q${this.props.endDx - 50} ${this.props.endDy + 50} ${this.props.endDx} ${this.props.endDy + 50}`} \r\n                    stroke=\"transparent\"\r\n                    strokeWidth=\"50\" \r\n                    fill=\"none\" \r\n                    onMouseEnter={this.handleOnEnter}\r\n                    onMouseLeave={this.handleOnExit}\r\n                    onMouseUp={this.props.handleOnClick}\r\n                    onTouchEnd={this.props.handleOnClick} />\r\n                {children({midPointX, midPointY, isHovered})} \r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nclass NodeForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const {title, description} = props;\r\n        this.state = {\r\n            title: title || \"\",\r\n            description: description || \"\",\r\n            titleProp: title || \"\",\r\n            descriptionProp: description || \"\"\r\n        };\r\n\r\n        this.handleOnTitleChange = this.handleOnTitleChange.bind(this);\r\n        this.handleOnDescriptionChange = this.handleOnDescriptionChange.bind(this);\r\n        this.resetInput = this.resetInput.bind(this);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const {title, description} = this.props;\r\n        if (this.state.titleProp === title &&\r\n            this.state.descriptionProp === description)\r\n            return;\r\n            \r\n        let nodeTitle = \"\";\r\n        let nodeDescription = \"\";\r\n        if (title)\r\n            nodeTitle = title;\r\n\r\n        if (description)\r\n            nodeDescription = description;\r\n\r\n        this.setState({title: nodeTitle, description: nodeDescription, titleProp: nodeTitle, descriptionProp: nodeDescription});\r\n    }\r\n\r\n    handleOnTitleChange(event) {\r\n        this.setState({title: event.target.value});\r\n    }\r\n\r\n    handleOnDescriptionChange(data) {\r\n        this.setState({description: data});\r\n    }\r\n\r\n    resetInput() {\r\n        this.setState({title: \"\", description: \"\"});\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <form className=\"text-gray-800\" action=\"\">\r\n                <label htmlFor=\"nodeTitle\">\r\n                    <p className=\"mb-2\">Title</p>\r\n                    <input id=\"nodeTitle\" className=\"px-2 py-1 mb-4 w-full rounded shadow-inner bg-gray-300 text-gray-700 outline-none focus:shadow-outline focus:bg-blue-100\" \r\n                        type=\"text\"\r\n                        value={this.state.title}\r\n                        onChange={this.handleOnTitleChange} />\r\n                </label>\r\n                <label htmlFor=\"nodeDescription\">\r\n                    <p className=\"mb-2\">Description</p>\r\n                    {/* Encode the data!!! And properly show the data in NodeView */}\r\n                    <CKEditor editor={ClassicEditor}\r\n                              data={this.state.description} \r\n                              onChange={(event, editor) => {\r\n                                  this.handleOnDescriptionChange(editor.getData());\r\n                              }}/>\r\n                </label>\r\n                <div className=\"mt-4 flex flex-col justify-center sm:justify-start sm:flex-row-reverse\">\r\n                    <input className=\"px-4 py-2 mb-2 sm:mb-0 rounded-md bg-indigo-500 text-gray-100 hover:bg-indigo-400 cursor-pointer\" \r\n                        type=\"button\" \r\n                        value={`${this.props.handleOnNodeCreate ? 'Create' : 'Edit'} Node`}\r\n                        onClick={() => {\r\n                            if (this.props.handleOnNodeCreate) {\r\n                                if (this.props.handleOnNodeCreate(this.state.title, this.state.description)) {\r\n                                    this.resetInput();\r\n                                    this.props.handleCloseModal();\r\n                                }\r\n                            } else if (this.props.handleOnNodeUpdate) {\r\n                                if (this.props.handleOnNodeUpdate(this.props.itemId, this.state.title, this.state.description)) {\r\n                                    this.resetInput();\r\n                                    this.props.handleCloseModal();\r\n                                }\r\n                            }\r\n                        }} />\r\n                    <input className=\"px-4 py-2 sm:mr-2 rounded-md bg-gray-300 text-indigo-500 hover:bg-gray-400 cursor-pointer\" \r\n                           type=\"button\" \r\n                           value=\"Cancel\" \r\n                           onClick={this.props.handleCloseModal} />\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nclass NodeView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            title: \"\",\r\n            description: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.componentDidUpdate();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const {title, description} = this.props;\r\n        if (this.state.title === title &&\r\n            this.state.description === description)\r\n            return;\r\n            \r\n        let nodeTitle = \"\";\r\n        let nodeDescription = \"\";\r\n        if (title)\r\n            nodeTitle = title;\r\n\r\n        if (description)\r\n            nodeDescription = description;\r\n\r\n        this.setState({title: nodeTitle, description: nodeDescription});\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"text-gray-800\">\r\n                <p className=\"mb-2 text-xl font-bold\">{this.props.title}</p>\r\n                <hr className=\"mb-4\" />\r\n                <div className=\"ck-content\" dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(this.props.description)}}></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass NodeChecklist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            list: []\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport '../assets/App.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { ParentSize } from '@vx/responsive';\r\n\r\nimport DBService from '../services/DBService.js';\r\nimport WorkArea from './WorkArea.js';\r\nimport Modal from './Modal';\r\nimport ProjectForm from './ProjectForm';\r\n\r\nexport default class Project extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedProject:  { id: 0, title: \"\", description: \"\" },\r\n            topHidden: false,\r\n            openProjectModal: null\r\n        };\r\n\r\n        this.handleHideTop = this.handleHideTop.bind(this);\r\n        this.handleOnProjectUpdate = this.handleOnProjectUpdate.bind(this);\r\n        this.handleOnProjectDelete = this.handleOnProjectDelete.bind(this);\r\n    }\r\n\r\n    // NOTE: Never ever use this.setState inside a componentDidUpdate()\r\n    // unless you can check if the update is necessary or not\r\n    componentDidUpdate() {\r\n        const id = parseInt(this.props.projectId);\r\n        if (this.state.selectedProject.id !== id) {\r\n            DBService.projects.get(id, project => {\r\n                this.setState({selectedProject: project});\r\n            }).catch(error => {\r\n                console.error(error.stack || error);\r\n            });\r\n        }\r\n    }\r\n\r\n    handleHideTop() {\r\n        this.setState(state => ({\r\n            topHidden: !state.topHidden\r\n        }));\r\n    }\r\n\r\n    handleOnProjectUpdate(title, description) {\r\n        if (!title || !description)\r\n            return false;\r\n\r\n        DBService.projects.update(this.state.selectedProject.id, {title: title, description: description}).then(() => {\r\n            this.props.refreshProjects();\r\n        }).catch(error => {\r\n            console.error(error.stack || error);\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    handleOnProjectDelete() {\r\n        DBService.projects.delete(this.state.selectedProject.id).then(() => {\r\n            this.props.refreshProjects();\r\n        }).catch(error => {\r\n            console.error(error.stack || error);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.selectedProject)\r\n            return(\r\n                <div className=\"main\">\r\n                    <div className=\"relative\">\r\n                        <div className=\"absolute w-full z-10\">\r\n                            <div  className={`${this.state.topHidden ? \"hidden\" : \"flex\"}  px-4 py-2 sm:p-6 items-center justify-between shadow bg-gray-100`}>\r\n                                <div className=\"\">\r\n                                    <h1 className=\"text-xl font-bold\">{this.state.selectedProject.title}</h1>\r\n                                    <span className=\"text-gray-700\">{this.state.selectedProject.description}</span>\r\n                                </div>\r\n                                <div className=\"flex flex-col sm:flex-row ml-2\">\r\n                                    <button className=\"mb-2 sm:mr-2 sm:mb-0 px-3 py-1 rounded-md whitespace-no-wrap text-indigo-500 border select-none border-indigo-500 hover:bg-indigo-500 hover:text-gray-100\"\r\n                                            onClick={this.state.openProjectModal}>\r\n                                        <FontAwesomeIcon className=\"mr-2\" icon=\"pencil-alt\" />\r\n                                        Edit\r\n                                    </button>\r\n                                    <button className=\"px-3 py-1 rounded-md whitespace-no-wrap text-red-500 border select-none border-red-500 hover:bg-red-500 hover:text-gray-100\"\r\n                                            onClick={this.handleOnProjectDelete}>\r\n                                        <FontAwesomeIcon className=\"mr-2\" icon=\"times\" />\r\n                                        Delete\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"relative\">\r\n                                <button className=\"hide-proj px-2 pb-1 lg:px-3 lg:py-2 absolute rounded-b-full bg-gray-400 text-gray-900 hover:bg-gray-900 hover:text-gray-400\" onClick={this.handleHideTop}>\r\n                                    <FontAwesomeIcon className=\"sm:text-base lg:text-xl\" icon={this.state.topHidden ? 'chevron-down' : 'chevron-up'} />\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    { /* Working area where nodes are found */ }\r\n                    <ParentSize>\r\n                        {\r\n                            ({width, height}) => (\r\n                                <WorkArea projectId={this.props.projectId} width={width} height={height} />\r\n                            )\r\n                        }\r\n                    </ParentSize>\r\n                    {/* Modals below */}\r\n                    <Modal title=\"Edit Project\"\r\n                            openModal={callable => {\r\n                                if (!this.state.openProjectModal)\r\n                                    this.setState({openProjectModal: callable});\r\n                            }}>\r\n                        {({closeModal}) => (\r\n                        <ProjectForm title={this.state.selectedProject.title}\r\n                                        description={this.state.selectedProject.description}\r\n                                        handleOnProjectUpdate={this.handleOnProjectUpdate}\r\n                                        handleCloseModal={closeModal} />\r\n                        )}\r\n                    </Modal>\r\n                </div>\r\n            );\r\n\r\n        return(\r\n            <div className=\"p-6\">\r\n                <h1 className=\"text-xl font-bold\">\r\n                    Please select a project first.\r\n                </h1>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport './assets/App.css';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { useParams, Switch, Route } from 'react-router-dom';\n\nimport SidebarNav from './components/SidebarNav.js';\nimport DBService from './services/DBService.js';\nimport Project from './components/Project';\n\nlibrary.add(fas);\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            projects: []\n        };\n\n        this.refreshProjects = this.refreshProjects.bind(this);\n        this.handleAddProject = this.handleAddProject.bind(this);\n    }\n\n  componentDidMount() {\n    this.refreshProjects();\n  }\n\n  refreshProjects() {\n    DBService.projects.toArray().then(projects => {\n      this.setState({ projects: projects });\n    });\n  }\n\n  handleAddProject(title, description) {\n    DBService.addProject(title, description)\n             .then(id => {\n                this.refreshProjects();\n             });\n  }\n\n  render() {\n    return (\n      <div className=\"flex flex-col lg:flex-row\">\n        <SidebarNav projects={this.state.projects} refreshProjects={this.refreshProjects} />\n        <article>\n          <Switch>\n            <Route path=\"/project/:projectId\">\n              <ParamsProvider>\n                {\n                  ({ projectId }) => {\n                    return <Project projectId={projectId} refreshProjects={this.refreshProjects} />\n                  }\n                }\n              </ParamsProvider>\n            </Route>\n            <Route path=\"/\">\n              <div className=\"p-6\">\n                <h1 className=\"text-xl font-bold\">\n                  Please select a project first.\n                </h1>\n              </div>\n            </Route>\n          </Switch>\n        </article>\n      </div>\n    );\n  }\n}\n\nfunction ParamsProvider({ children }) {\n  let { projectId } = useParams();\n  return children({ projectId });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/main.css';\nimport App from './App';\nimport Test from './Test';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/project-tracker\">\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}